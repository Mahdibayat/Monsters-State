{"version":3,"sources":["components/SearchBar/search-bar-component.jsx","components/MonsterArea/monster-area-component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","className","type","placeholder","value","input","onChange","handleChange","MonsterArea","data","map","item","i","key","id","src","alt","name","email","App","e","setState","target","state","axios","method","url","then","response","this","filterInput","filter","monster","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iTAIaA,G,YAAY,SAACC,GAAD,OACrB,yBAAKC,UAAU,cACX,2BAAOA,UAAU,QAAQC,KAAK,OAAOC,YAAY,0BAA0BC,MAAOJ,EAAMK,MAAOC,SAAUN,EAAMO,kBCH1GC,G,MAAc,SAACR,GAAD,OACvB,yBAAKC,UAAU,WAEPD,EAAMS,KAAKC,KAAI,SAACC,EAAMC,GAAP,OACX,yBAAKX,UAAU,SAASY,IAAKF,EAAKG,IAC9B,yBAAKC,IAAG,iCAA4BJ,EAAKG,GAAjC,8BAAiEE,IAAG,iBAAYL,EAAKG,MAC7F,qCAAWH,EAAKM,MAChB,qCAAWN,EAAKO,c,iBCsCrBC,E,kDAzCX,WAAYnB,GAAQ,IAAD,8BACf,cAAMA,IAeVO,aAAe,SAACa,GACZ,EAAKC,SAAS,CACVhB,MAAOe,EAAEE,OAAOlB,SAhBpB,EAAKmB,MAAQ,CACTlB,MAAO,GACPI,KAAM,IAJK,E,gEAOE,IAAD,OAChBe,IAAM,CACFC,OAAQ,MACRC,IAAK,+CAEJC,MAAK,SAAAC,GAAQ,OAAIA,EAASnB,QAC1BkB,MAAK,SAAAlB,GAAI,OAAI,EAAKY,SAAS,CAAEZ,KAAOA,S,+BAUnC,IAAD,EACmBoB,KAAKN,MAArBlB,EADH,EACGA,MACFyB,EAFD,EACUrB,KACUsB,QAAO,SAAAC,GAAO,OAC/BA,EAAQf,KAAKgB,cAAcC,SAAS7B,EAAM4B,kBAElD,OACI,yBAAKhC,UAAU,OACX,wBAAIA,UAAU,WAAd,6BACA,kBAAC,EAAD,CACII,MAAOwB,KAAKN,MAAMlB,MAClBE,aAAcsB,KAAKtB,eAEvB,kBAAC,EAAD,CAAaE,KAAMqB,S,GApCjBK,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e3159e75.chunk.js","sourcesContent":["import React from 'react'\nimport './search-bar-component.scss'\n\n\nexport const SearchBar = (props) => (\n    <div className='input-area'>\n        <input className='input' type='text' placeholder='search your killer here' value={props.input} onChange={props.handleChange} />\n    </div>\n)","import React from 'react'\nimport './monster-area-component.scss'\n\nexport const MonsterArea = (props) => (\n    <div className='monster'>\n        {\n            props.data.map((item, i) => (\n                <div className='cardes' key={item.id}>\n                    <img src={`https://robohash.org/AY${item.id}.png?set=set2&size=180x180`} alt={`monster${item.id}`}/>\n                    <h3>Name: {item.name}</h3>\n                    <p>Email: {item.email}</p>\n                </div>\n            ))\n        }\n    </div>\n)","import React from 'react';\nimport './App.scss';\nimport { SearchBar } from \"./components/SearchBar/search-bar-component\";\nimport { MonsterArea } from \"./components/MonsterArea/monster-area-component\";\nimport axios from 'axios'\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: '',\n            data: []\n        }\n    }\n    componentDidMount() {\n        axios({\n            method: 'get',\n            url: 'https://jsonplaceholder.typicode.com/users',\n        })\n            .then(response => response.data)\n            .then(data => this.setState({ data : data}))\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            input: e.target.value\n        })\n    }\n\n\n    render() {\n        const { input, data } = this.state;\n        const filterInput = data.filter(monster =>\n                monster.name.toLowerCase().includes(input.toLowerCase())\n        )\n        return (\n            <div className='bod'>\n                <h1 className='welcome'>welcome to monsters state</h1>\n                <SearchBar\n                    input={this.state.input}\n                    handleChange={this.handleChange}\n                />\n                <MonsterArea data={filterInput} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}